package com.isluji.travial.data;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.room.TypeConverters;
import androidx.sqlite.db.SupportSQLiteDatabase;

import com.isluji.travial.R;
import com.isluji.travial.enums.TriviaDifficulty;
import com.isluji.travial.misc.Converters;
import com.isluji.travial.model.Trivia;
import com.isluji.travial.model.TriviaAnswer;
import com.isluji.travial.model.TriviaQuestion;
import com.isluji.travial.model.TriviaResult;
import com.isluji.travial.model.User;

// We need to declare all the entities here
@Database(entities = {User.class, Trivia.class, TriviaQuestion.class,
        TriviaAnswer.class, TriviaResult.class}, version = 7)
@TypeConverters({Converters.class})
public abstract class AppDatabase extends RoomDatabase {

    public abstract AppDao getAppDao();

    // Marking the instance as volatile to ensure atomic access to the variable
    private static volatile AppDatabase INSTANCE;
    private static String roomDbName;

    public static AppDatabase getDatabase(final Context context) {
        roomDbName = context.getString(R.string.room_db_name);

        if (INSTANCE == null) {
            synchronized (AppDatabase.class) {

                if (INSTANCE == null) {
                    /* ***** Creating the database ***** */

                    // Creates the database builder.
                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, roomDbName)

                    // TODO? Migration path from version 1 to 2
                    // Wipes and rebuilds instead of migrating if no Migration object.
                    .fallbackToDestructiveMigration()

                    // Add onCreate and onOpen callbacks to the builder.
                    .addCallback(sCallback)

                    // Finally builds the database.
                    .build();

                    Log.v(roomDbName,"Se ha construido la BD ( rdbBuilder.build() )");
                }
            }
        }

        return INSTANCE;
    }

    private static RoomDatabase.Callback sCallback = new RoomDatabase.Callback() {

        /** Called after database has been created (only once) */
        @Override
        public void onCreate(@NonNull SupportSQLiteDatabase db) {
            super.onCreate(db);

            Log.v(roomDbName, "Ejecutando AppDB onCreate()");

//            new PopulateDbAsync(INSTANCE).execute();
        }

        /** Called every time database is opened */
        @Override
        public void onOpen(@NonNull SupportSQLiteDatabase db) {
            super.onOpen(db);

            Log.v(roomDbName, "Ejecutando AppDB onOpen()");

            // If you want to keep the data through app restarts,
            // comment out the following line.
            new PopulateDbAsync(INSTANCE).execute();
        }
    };


    /**
     * Populate the database in the background.
     */
    private static class PopulateDbAsync extends AsyncTask<Void, Void, Void> {

        private final AppDao mDao;

        PopulateDbAsync(AppDatabase db) {
            mDao = db.getAppDao();
        }

        @Override
        protected Void doInBackground(final Void... params) {
            // Start the app with a clean database every time.
            // Not needed if you only populate on creation.
            this.clearDatabase();

            this.insertTrivia_FuenteDelRey();
            this.insertTrivia_Castillo();
            this.insertTrivia_Cementerio();

            // These parks are not really POIs but will do the trick
            // as being the nearest places for me to test
            this.insertTriviaExample("Parque de Avilés", "ChIJPYupnvmQbQ0R5qpRb66ggos");
            this.insertTriviaExample("Parque de la Inmaculada", "ChIJEy-74GiRbQ0RiQwJpKZ25fE");
            this.insertTriviaExample("Parque de los Médicos", "ChIJvR8MvPmQbQ0RAGMKRheVVN8");

            return null;
        }

        private void clearDatabase() {
            mDao.deleteAllResults();
//            mDao.deleteAllUsers();
            mDao.deleteAllAnswers();
            mDao.deleteAllQuestions();
            mDao.deleteAllTrivias();
        }


        // ---------- Methods to create each Trivia ----------

        private void insertTrivia_FuenteDelRey() {
            // After we insert the Trivia in the DB, we need to get the ID
            // that Room has autogenerated for it, so we can create
            // the Questions using that ID as a reference for its Trivia.
            Trivia trivia = new Trivia("Historia de la Fuente del Rey", TriviaDifficulty.EASY, 5, "ChIJ0Y-F5lWQbQ0R-DLx-r_U8mI");
            trivia.setId(Long.valueOf(mDao.insertTrivia(trivia)).intValue());

            TriviaQuestion q1 = new TriviaQuestion("¿Quién fue su autor?", 3.33, trivia.getId());
            TriviaQuestion q2 = new TriviaQuestion("¿En qué año fue construida?", 3.33, trivia.getId());
            TriviaQuestion q3 = new TriviaQuestion("¿Cuál es su estilo arquitectónico?", 3.33, trivia.getId());

            // Repeat process with each Question and its Answers
            long[] questionIds = mDao.insertQuestions(q1, q2, q3);
            q1.setId(Long.valueOf(questionIds[0]).intValue());
            q2.setId(Long.valueOf(questionIds[1]).intValue());
            q3.setId(Long.valueOf(questionIds[2]).intValue());

            TriviaAnswer a1_1 = new TriviaAnswer("José Álvarez Cubero", false, q1.getId());
            TriviaAnswer a1_2 = new TriviaAnswer("Remigio del Mármol", true, q1.getId());
            TriviaAnswer a1_3 = new TriviaAnswer("Adolfo Lozano Sidro", false, q1.getId());

            TriviaAnswer a2_1 = new TriviaAnswer("1803", true, q2.getId());
            TriviaAnswer a2_2 = new TriviaAnswer("1805", false, q2.getId());
            TriviaAnswer a2_3 = new TriviaAnswer("1823", false, q2.getId());

            TriviaAnswer a3_1 = new TriviaAnswer("Románico", false, q3.getId());
            TriviaAnswer a3_2 = new TriviaAnswer("Renacentista", false, q3.getId());
            TriviaAnswer a3_3 = new TriviaAnswer("Barroco", true, q3.getId());

            mDao.insertAnswers( a1_1, a1_2, a1_3,
                                a2_1, a2_2, a2_3,
                                a3_1, a3_2, a3_3);
        }

        private void insertTrivia_Cementerio() {
            // After we insert the Trivia in the DB, we need to get the ID
            // that Room has autogenerated for it, so we can create
            // the Questions using that ID as a reference for its Trivia.
            Trivia trivia = new Trivia("Historia del Cementerio", TriviaDifficulty.MEDIUM, 5, "ChIJQxHtE_qQbQ0RAPCmX1wLTEI");
            trivia.setId(Long.valueOf(mDao.insertTrivia(trivia)).intValue());

            TriviaQuestion q1 = new TriviaQuestion("¿Qué alcalde de Priego inauguró el Cementerio?", 3.33, trivia.getId());
            TriviaQuestion q2 = new TriviaQuestion("¿Qué hermandad dispone de un panteón particular?", 3.33, trivia.getId());
            TriviaQuestion q3 = new TriviaQuestion("¿En qué año fue inaugurado?", 3.33, trivia.getId());

            // Repeat process with each Question and its Answers
            long[] questionIds = mDao.insertQuestions(q1, q2, q3);
            q1.setId(Long.valueOf(questionIds[0]).intValue());
            q2.setId(Long.valueOf(questionIds[1]).intValue());
            q3.setId(Long.valueOf(questionIds[2]).intValue());

            TriviaAnswer a1_1 = new TriviaAnswer("Tomás Delgado Toro", false, q1.getId());
            TriviaAnswer a1_2 = new TriviaAnswer("Antonio de la Barrera", true, q1.getId());
            TriviaAnswer a1_3 = new TriviaAnswer("José Tomás Valverde", false, q1.getId());

            TriviaAnswer a2_1 = new TriviaAnswer("Hermandad de la Caridad", true, q2.getId());
            TriviaAnswer a2_2 = new TriviaAnswer("Hermandad de la Soledad", false, q2.getId());
            TriviaAnswer a2_3 = new TriviaAnswer("Hermandad de Ntro. Padre Jesús Nazareno", false, q2.getId());

            TriviaAnswer a3_1 = new TriviaAnswer("1927", false, q3.getId());
            TriviaAnswer a3_2 = new TriviaAnswer("1891", false, q3.getId());
            TriviaAnswer a3_3 = new TriviaAnswer("1869", true, q3.getId());

            mDao.insertAnswers( a1_1, a1_2, a1_3,
                                a2_1, a2_2, a2_3,
                                a3_1, a3_2, a3_3);
        }

        private void insertTrivia_Castillo() {
            // After we insert the Trivia in the DB, we need to get the ID
            // that Room has autogenerated for it, so we can create
            // the Questions using that ID as a reference for its Trivia.
            Trivia trivia = new Trivia("Torre del Homenaje", TriviaDifficulty.MEDIUM, 5, "ChIJWVifLv6QbQ0R_R0Gcgbroys");
            trivia.setId(Long.valueOf(mDao.insertTrivia(trivia)).intValue());

            TriviaQuestion q1 = new TriviaQuestion("¿Qué otro nombre recibe esta torre?", 3.33, trivia.getId());
            TriviaQuestion q2 = new TriviaQuestion("¿Desde qué año es Monumento Histórico-Artístico Nacional?", 3.33, trivia.getId());
            TriviaQuestion q3 = new TriviaQuestion("¿Qué altura posee esta torre?", 3.33, trivia.getId());

            // Repeat process with each Question and its Answers
            long[] questionIds = mDao.insertQuestions(q1, q2, q3);
            q1.setId(Long.valueOf(questionIds[0]).intValue());
            q2.setId(Long.valueOf(questionIds[1]).intValue());
            q3.setId(Long.valueOf(questionIds[2]).intValue());

            TriviaAnswer a1_1 = new TriviaAnswer("Torre Alta", false, q1.getId());
            TriviaAnswer a1_2 = new TriviaAnswer("Torre Gorda", true, q1.getId());
            TriviaAnswer a1_3 = new TriviaAnswer("Torre de Priego", false, q1.getId());

            TriviaAnswer a2_1 = new TriviaAnswer("1978", false, q2.getId());
            TriviaAnswer a2_2 = new TriviaAnswer("1943", true, q2.getId());
            TriviaAnswer a2_3 = new TriviaAnswer("1954", false, q2.getId());

            TriviaAnswer a3_1 = new TriviaAnswer("30 metros", true, q3.getId());
            TriviaAnswer a3_2 = new TriviaAnswer("24 metros", false, q3.getId());
            TriviaAnswer a3_3 = new TriviaAnswer("20 metros", false, q3.getId());

            mDao.insertAnswers( a1_1, a1_2, a1_3,
                                a2_1, a2_2, a2_3,
                                a3_1, a3_2, a3_3);
        }

        // Placeholder Trivia for testing purposes
        private void insertTriviaExample(String title, String placeId) {
            // After we insert the Trivia in the DB, we need to get the ID
            // that Room has autogenerated for it, so we can create
            // the Questions using that ID as a reference for its Trivia.
            Trivia trivia = new Trivia(title, TriviaDifficulty.EASY, 5, placeId);
            trivia.setId(Long.valueOf(mDao.insertTrivia(trivia)).intValue());

            TriviaQuestion q1 = new TriviaQuestion("Pregunta de prueba 1", 3.33, trivia.getId());
            TriviaQuestion q2 = new TriviaQuestion("Pregunta de prueba 2", 3.33, trivia.getId());
            TriviaQuestion q3 = new TriviaQuestion("Pregunta de prueba 3", 3.33, trivia.getId());

            // Repeat process with each Question and its Answers
            long[] questionIds = mDao.insertQuestions(q1, q2, q3);
            q1.setId(Long.valueOf(questionIds[0]).intValue());
            q2.setId(Long.valueOf(questionIds[1]).intValue());
            q3.setId(Long.valueOf(questionIds[2]).intValue());

            TriviaAnswer a1_1 = new TriviaAnswer("Respuesta 1", false, q1.getId());
            TriviaAnswer a1_2 = new TriviaAnswer("Respuesta 2 (correcta)", true, q1.getId());
            TriviaAnswer a1_3 = new TriviaAnswer("Respuesta 3", false, q1.getId());

            TriviaAnswer a2_1 = new TriviaAnswer("Respuesta 1", false, q2.getId());
            TriviaAnswer a2_2 = new TriviaAnswer("Respuesta 2", false, q2.getId());
            TriviaAnswer a2_3 = new TriviaAnswer("Respuesta 3 (correcta)", true, q2.getId());

            TriviaAnswer a3_1 = new TriviaAnswer("Respuesta 1 (correcta)", true, q3.getId());
            TriviaAnswer a3_2 = new TriviaAnswer("Respuesta 2", false, q3.getId());
            TriviaAnswer a3_3 = new TriviaAnswer("Respuesta 3", false, q3.getId());

            mDao.insertAnswers( a1_1, a1_2, a1_3,
                                a2_1, a2_2, a2_3,
                                a3_1, a3_2, a3_3);
        }
    }
}

